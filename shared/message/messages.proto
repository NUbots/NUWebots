/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2021 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package controller.nugus;

// Copy of cyberbotics/webots projects/samples/contests/robocup/controllers/player/messages.proto


message Vector3 {
    double X = 1;
    double Y = 2;
    double Z = 3;
}

message fvec3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message PositionSensorMeasurement {
    string name  = 1;
    double value = 2;
}

message AccelerometerMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [m/sË†2], x-axis, y-axis, z-axis
}

message GyroMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [rad/s], x-axis, y-axis, z-axis
}

message BumperMeasurement {
    string name  = 1;
    bool   value = 2;
}

message ForceMeasurement {
    string name  = 1;
    double value = 2;  // [N]
}

message Force3DMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [N], x-axis, y-axis, z-axis
}

message Force6DMeasurement {  // not yet implemented by cyberbotics/tc, but we don't use it anyway
    string  name   = 1;
    Vector3 force  = 2;  // [N], x-axis, y-axis, z-axis
    Vector3 torque = 3;  // [N.m], x-axis, y-axis, z-axis
}

message CameraMeasurement {
    string name    = 1;
    uint32 width   = 2;
    uint32 height  = 3;
    sint32 quality = 4;  // -1 = raw image, 100 = no compression, 0 = high compression
    bytes  image   = 5;  // RAW or JPEG encoded data (note: JPEG is not yet implemented)
}

message Message {
    enum MessageType {
        ERROR_MESSAGE   = 0;
        WARNING_MESSAGE = 1;
    }
    MessageType message_type = 1;
    string      text         = 2;
}

// NUbots-specific, used for the walk optimisation
message OptimisationRobotPosition {
    Vector3 value = 1;
}

/// NUbots specific data sent from our own controllers rather than the official RoboCup Webots controller
message OdometryGroundTruth {
    /// Indicates if this message exists
    bool exists = 1;
    /// Affine3d transform from odometry (world) space to the robot (torso) space.
    /// It measures the world in robot space
    mat4 Htw = 2;
}

message VisionGroundTruth {
    /// Indicates if this message exists
    bool exists = 1;
    /// Vector from the world to the ball in world space.
    fvec3 rBWw = 2;
}

message mat4 {
    vec4 x = 1;
    vec4 y = 2;
    vec4 z = 3;
    vec4 t = 4;
}

message vec4 {
    double x = 1;
    double y = 2;
    double z = 3;
    double t = 4;
}

message SensorMeasurements {
    // simulation time stamp at which the measurements were performed expressed in [ms] from the start of the connection
    uint32 time = 1;
    // real unix time stamp at which the measurements were performed in [ms]
    uint64                             real_time        = 2;
    repeated Message                   messages         = 3;
    repeated AccelerometerMeasurement  accelerometers   = 4;
    repeated BumperMeasurement         bumpers          = 5;
    repeated CameraMeasurement         cameras          = 6;
    repeated ForceMeasurement          forces           = 7;
    repeated Force3DMeasurement        force3ds         = 8;
    repeated Force6DMeasurement        force6ds         = 9;
    repeated GyroMeasurement           gyros            = 10;
    repeated PositionSensorMeasurement position_sensors = 11;
    // NUbots-specific data. Set to 100 in case other data is added in by the RoboCup TC
    OdometryGroundTruth odometry_ground_truth = 100;
    VisionGroundTruth   vision_ground_truth   = 101;
    // Optimisation
    OptimisationRobotPosition robot_position = 102;
    bool                      reset_done     = 103;
}

message MotorPosition {
    string name     = 1;
    double position = 2;  // linear or angular target position expressed in [m] or [rad]
}

message MotorVelocity {
    string name     = 1;
    double velocity = 2;  // linear or angular target velocity expressed in [m/s] or [rad/s]
}

message MotorForce {
    string name  = 1;
    double force = 2;  // target force expressed in [N]
}

message MotorTorque {
    string name   = 1;
    double torque = 2;  // target torque expressed in [N.m]
}

message MotorPID {
    string  name = 1;
    Vector3 PID  = 2;  // PID controller values
}

message SensorTimeStep {  // apply to all sensors: Accelerometer, Camera, Gyro, PositionSensor and TouchSensor
    string name     = 1;
    uint32 timeStep = 2;  // time between two measurements expressed in [ms], disabled if 0
}

message CameraQuality {
    string name    = 1;
    sint32 quality = 2;  // JPEG quality
}

message CameraExposure {
    string name     = 1;
    double exposure = 2;  // photometric exposure of the scene in joule per square meter [J/m^2]
}

// NUbots-specific, used for the walk optimisation
message OptimisationCommand {
    enum CommandType {
        NO_COMMAND  = 0;
        RESET_ROBOT = 1;
        RESET_TIME  = 2;
        TERMINATE   = 3;
    }
    CommandType command = 1;
}

message ActuatorRequests {
    repeated MotorPosition  motor_positions   = 1;
    repeated MotorVelocity  motor_velocities  = 2;
    repeated MotorForce     motor_forces      = 3;
    repeated MotorTorque    motor_torques     = 4;
    repeated MotorPID       motor_pids        = 5;
    repeated SensorTimeStep sensor_time_steps = 6;
    repeated CameraQuality  camera_qualities  = 7;
    repeated CameraExposure camera_exposures  = 8;

    // NUbots-specific data. Set to 100 in case other data is added in by the RoboCup TC
    OptimisationCommand optimisation_command = 100;
}
