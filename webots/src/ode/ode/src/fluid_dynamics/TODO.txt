

(1) Reference Area
The reference area is the area used to compute the drag forces and drag torques of the fluid acting on the (partially) immersed body.
One of the most natural choice is the immersed area of the geometry.
This computation mode is fully implemented.

Another choice consists in the projection the immersed area onto planes orthogonal to the geometry's frame axes.
It allows to specify directional drag coefficients (see salamander.wbt).
It is fully implemented for the box. It is also implemented for fully immersed cylinders, capsules and spheres. It is not implemented for the trimesh.

(1.1) Refines xyz-projected area computation
Currently we make the assumption that the geometry has three symetry planes and hence compute 3 projections only.
To be adapted to a generic trimesh, we should consider 6 = 2 * 3 projections and choose 3 out of them based on the linear speed coordinates expressed in
the geometry frame (keep the projections for which the coordinates are positive).

(1.2) Implement the xyz-projected area computation for a generic trimesh (straightforward)

(1.3) Implement the xyz-projected area computation for the sphere, the cylinder and the capsule (technical but manageable)

Another natural choice of reference area would be the 'exposed area', i.e., the surface of geometry which struck by the stream lines of the fluid.
It is particularly interesting to model wind more faithfully.

(1.4) Implement the exposed area computation for fully immersed geometries (straightforward)

(1.5) Implement the exposed area computation for partially immersed trimesh (straightforward) with self-occlusion for non-convex ones (manageable)

(1.6) Implement the exposed area computation for partially immersed cylinders, capsules and spheres (technical but manageable)

(2) Occlusion
Occlusion of wind by neighbouring solids is missing. This could be approximated by intersection prisms based on AABB boxes with surrounding geometries.

(3) Performance

Tests indicates that cylinder-box collision detection requires numerous computations in the case of a (partially) immersed cylinder into a fluid bounded by a Box.
One reason for this is that such a test does not exit as soon has it has detected a contact but cumulates the failure information to refine its contact computation.
In the case where the contact occurs between a box and a cylinder, 40 tests are performed before returning the expected answer.

(3.1) Choose one of the following strategies for the cylinder-box collision detection (used as the first step of immersion detection):

- implement a custom collision detection function (used only for immersion) that will run much faster (straightforward)
- modify the existing one to minimize the cost of failed tests (inline for instance these elementary separating tests)
- use the cylinder-box collider from libccd which generates only one contact and hence might be much faster

(3.2) Choose one of the above strategies for every collision test

Capsule immersion computations rely on a iterative method (Simpson's rule) to get integrand approximates. But exact formulas can be derived and would
make the computations much faster. Part of these (complex) formulas are already documented in src/util/immersion.tex

(3.2) Use exact formulas in immersion_capsule.cpp

The following opitmization looks interesting in any collision context:

(3.3) Express the geometry to be collided with a trimesh into the trimesh's frame before looking for contacts / immersed triangles
In particular immersion_trimesh.cpp would benefit of this strategy by transforming a single plane equation and not all the coordinates of the trimesh vertices.

(4) Deep penetration issues
 When the contacts are too deep, collision detection may fail. This is particularly annoying when a geometry is fully immersed into another non-plane geometry (the plane never fails).
 There were failures for cylinder-cylinder, cylinder-capsule so that both collision detections were enhanced to handle also deep contacts.
 For trimesh-capsule I had to implement custom collision detection to detect immersion (which is most probably faster because of the reasons mentioned in (3)). The changelog of ODE-0.13 states that the collision detection capsule-box has an improved management of deep contacts.

(4.1) Make sure deep penetration is handled in any case; if not enhance the collision detection itself or find workaround such as a simplified (hence faster) custom collision detection

(5) Enable more geometries for bounding volumes

(5.1) Enable the heightfield geometry as an admissible fluid bounding volume
(5.2) Consider the ellipsoid for aerodynamics application (foils)

(6) Added mass
Added mass is way to model drag forces and torques when the motion is accelerated. It should be quite stable since it consists in modifying dynamically the inertia matrix of immersed solids.
